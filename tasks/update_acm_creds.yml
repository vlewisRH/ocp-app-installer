---
- name: Acquire Argo token
  block:
    - name: Get Argo token
      ansible.builtin.shell: |
        oc login --token={{ K8S_AUTH_API_KEY }} --server={{ K8S_AUTH_HOST }} --insecure-skip-tls-verify
        oc serviceaccounts get-token openshift-gitops-argocd-application-controller -n {{ gitops_namespace }}
      changed_when: false
      register: argotoken
      no_log: true
  rescue:
    - name: Create Argo token
      ansible.builtin.shell: |
        oc login --token={{ K8S_AUTH_API_KEY }} --server={{ K8S_AUTH_HOST }} --insecure-skip-tls-verify
        oc serviceaccounts new-token openshift-gitops-argocd-application-controller -n {{ gitops_namespace }}
      changed_when: false
      register: argotoken
      no_log: true

- name: Store Env
  ansible.builtin.set_fact:
    oc_sa_token: "{{ argotoken.stdout_lines[argotoken.stdout_lines | length - 1] }}"
  no_log: true

- name: Create config
  ansible.builtin.set_fact:
    acm_cluster_config:
      bearerToken: "{{ oc_sa_token }}"
      tlsClientConfig:
        insecure: true
  no_log: true

- name: Update Cluster Secret
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'secrets/' + 'acm-cluster-secret.yml.j2') }}"
    apply: true

- name: Create a valid openshift credential oc-sa-{{ cluster_name }} and verify connection
  awx.awx.credential:
    name: "oc-sa-{{ cluster_name }}"
    organization: Default
    controller_username: "{{ aap_username }}"
    controller_password: "{{ aap_password }}"
    controller_host: "{{ aap_host }}"
    validate_certs: false
    state: present
    credential_type: openshift-service-account
    inputs:
      host: "{{ K8S_AUTH_HOST }}"
      token: "{{ oc_sa_token }}"
  retries: 100
  delay: 15
  register: aap_cred_set
  until:
    - aap_cred_set is defined
    - aap_cred_set.changed is defined
    - aap_cred_set.changed is true

- name: Get kubeconfig Facts
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ acm_cluster_name }}"
    label_selectors:
      - hive.openshift.io/cluster-deployment-name = {{ cluster_name }}
      - hive.openshift.io/secret-type = kubeconfig
  register: kubeconfig_facts
  no_log: true

- name: Set kubeconfig secrets
  block:
    - name: Set kubeconfig secret name
      ansible.builtin.set_fact:
        kubeconfig_secret_name: "{{ kubeconfig_facts.resources[0].metadata.name }}"
      no_log: true

    - name: Set kubeconfig provision name
      ansible.builtin.set_fact:
        kubeconfig_provision_name: "{{ kubeconfig_facts.resources[0].metadata.labels['hive.openshift.io/cluster-provision-name'] }}"
      no_log: true

  rescue:
    - name: Set kubeconfig secret name
      ansible.builtin.set_fact:
        kubeconfig_secret_name: "{{ cluster_name }}-admin-kubeconfig"
      no_log: true

    - name: Set kubeconfig provision name
      ansible.builtin.set_fact:
        kubeconfig_provision_name: "{{ cluster_name }}"
      no_log: true
  # End block

- name: Get kubeadmincreds Facts
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ acm_cluster_name }}"
    label_selectors:
      - hive.openshift.io/cluster-deployment-name = {{ cluster_name }}
      - hive.openshift.io/secret-type = kubeadmincreds
  register: kubeadmincreds_facts
  no_log: true

- name: Set kumeadmincreds secrets
  block:
    - name: Set kubeadmincreds secret name
      ansible.builtin.set_fact:
        kubeadmincreds_secret_name: "{{ kubeadmincreds_facts.resources[0].metadata.name }}"

    - name: Set kubeadmincreds provision name
      ansible.builtin.set_fact:
        kubeadmincreds_provision_name: "{{ kubeadmincreds_facts.resources[0].metadata.labels['hive.openshift.io/cluster-provision-name'] }}"
      no_log: true

  rescue:
    - name: Set kubeadmincreds secret name
      ansible.builtin.set_fact:
        kubeadmincreds_secret_name: "{{ cluster_name }}-admin-password"

    - name: Set kubeadmincreds provision name
      ansible.builtin.set_fact:
        kubeadmincreds_provision_name: "{{ cluster_name }}"
  # End block

- name: Update Cluster Kubeconfig
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'secrets/' + 'acm-kubeconfig-secret.yml.j2') }}"
    apply: true
  no_log: true

- name: Update Cluster Admin Secret
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'secrets/' + 'acm-admin-secret.yml.j2') }}"
    apply: true
  no_log: true

- name: Get token
  ansible.builtin.shell: |
    oc login --token={{ K8S_AUTH_API_KEY }} --server={{ K8S_AUTH_HOST }} --insecure-skip-tls-verify
    oc serviceaccounts get-token ansible-cluster-create -n ansible-automation-platform
  register: ansibletoken
  no_log: true
  when: mgmt_cluster
  ignore_errors: true

- name: Add AAP Credential for MGMT API
  awx.awx.credential:
    name: "{{ cluster_name }}-sa"
    organization: Default
    controller_username: "{{ aap_username }}"
    controller_password: "{{ aap_password }}"
    controller_host: "{{ aap_host }}"
    validate_certs: false
    state: present
    credential_type: "OpenShift or Kubernetes API Bearer Token"
    inputs:
      host: "{{ K8S_AUTH_HOST }}"
      verify_ssl: false
      bearer_token: "{{ ansibletoken.stdout_lines[ansibletoken.stdout_lines | length - 1] }}"
  when: mgmt_cluster
  ignore_errors: true
