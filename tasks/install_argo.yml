---
- name: Create Namespace
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    definition: "{{ lookup('template', 'argo/'+item) }}"
  loop:
  - gitops-ns.yml.j2

- name: Create GitOps Argo Objects
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    definition: "{{ lookup('template', 'argo/'+item) }}"
  loop:
  - gitops-secrets.yml.j2

- name: Install GitOps Operator 
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    definition: "{{ lookup('template', 'argo/'+item) }}"
  loop:
  - gitops-sub.yml.j2

- name: Approve InstallPlan
  ansible.builtin.include_tasks:
    file: approve_installplans.yml
  when: create_cluster or create_cluster_acm or update_operators

- name: Wait for GitopsService be defined...
  kubernetes.core.k8s_info:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    api_version: pipelines.openshift.io/v1alpha1
    kind: GitopsService
    name: cluster
  register: gitops_service_status_out
  until:
  - gitops_service_status_out is defined
  - gitops_service_status_out.resources is defined
  - gitops_service_status_out.resources[0] is defined
  retries: 6
  delay: 10
  ignore_errors: True

- name: Wait for Cluster Argo Instance to be defined...
  kubernetes.core.k8s_info:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    api_version: argoproj.io/v1alpha1
    kind: ArgoCD
    name: openshift-gitops
    namespace: "{{ gitops_namespace }}"
  register: argocd_status_out
  until:
  - argocd_status_out is defined
  - argocd_status_out.resources is defined
  - argocd_status_out.resources[0] is defined
  retries: 6
  delay: 10

- name: Wait for ArgoCD CustomResourceDefinition to be defined...
  kubernetes.core.k8s_info:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: argocds.argoproj.io
  register: argocd_crd_status_out
  until:
  - argocd_crd_status_out is defined
  - argocd_crd_status_out.resources is defined
  - argocd_crd_status_out.resources[0] is defined
  - argocd_crd_status_out.resources[0].status is defined
  - argocd_crd_status_out.resources[0].status.conditions is defined
  retries: 30
  delay: 10

- name: Update ArgoCD SA
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    definition: "{{ lookup('template', 'argo/'+item) }}"
  loop:
  - gitops-sa.yml.j2

- name: Replace SSO DEX
  block:
  - name: Remove ArgoCD SSO
    kubernetes.core.k8s_json_patch:
      api_key: "{{ K8S_AUTH_API_KEY  }}"
      host: "{{ K8S_AUTH_HOST }}"
      api_version: argoproj.io/v1alpha1
      kind: ArgoCD
      name: openshift-gitops
      namespace: "{{ gitops_namespace }}"
      patch:
        - op: remove
          path: /spec/sso
  - name: Update ArgoCD SA
    kubernetes.core.k8s:
      api_key: "{{ K8S_AUTH_API_KEY  }}"
      host: "{{ K8S_AUTH_HOST }}"
      state: present
      definition: "{{ lookup('template', 'argo/'+item) }}"
    loop:
    - gitops-sa.yml.j2
  when: argocd_status_out.resources[0].spec.sso is defined

- name: Get or Create Token
  block:
  - name: Get token
    shell: |
      oc login --token={{ K8S_AUTH_API_KEY }} --server={{ K8S_AUTH_HOST }} --insecure-skip-tls-verify
      oc serviceaccounts get-token openshift-gitops-argocd-dex-server -n {{ gitops_namespace }}
    register: dextoken
    no_log: true
  rescue:
  - name: Create token
    shell: |
      oc login --token={{ K8S_AUTH_API_KEY }} --server={{ K8S_AUTH_HOST }} --insecure-skip-tls-verify
      oc serviceaccounts new-token openshift-gitops-argocd-dex-server -n {{ gitops_namespace }}
    register: dextoken
    no_log: true

- name: Add ArgoCD Instance  
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    definition: "{{ lookup('template', 'argo/'+item) }}"
    apply: yes
  loop:
  - gitops-instance.yml.j2
  - gitops-secrets.yml.j2

- name: Waiting for Deployment to be defined...
  k8s_info:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    api_version: apps/v1
    kind: Deployment
    name: openshift-gitops-server
    namespace: "{{ gitops_namespace }}"
  register: argo_server_status
  until:
  - argo_server_status is defined
  - argo_server_status.resources is defined
  - argo_server_status.resources[0] is defined
  retries: 30
  delay: 10

- name: Update ArgoCD Instance  
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    definition: "{{ lookup('template', 'argo/'+item) }}"
    apply: yes
  loop:
  - gitops-secrets-patch.yml.j2
  - gitops-momot-config.yml.j2
  when: mgmt_cluster or create_tssc_momot_resources

- name: Update Argo Roles  
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    definition: "{{ lookup('template', 'argo/'+item) }}"
    apply: yes
  loop:
  - gitops-roles.yml.j2

- name: Wait for Application CustomResourceDefinition to be defined...
  k8s_info:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: applications.argoproj.io
  register: application_crd_status_out
  until:
  - application_crd_status_out is defined
  - application_crd_status_out.resources is defined
  - application_crd_status_out.resources[0] is defined
  - application_crd_status_out.resources[0].status is defined
  - application_crd_status_out.resources[0].status.conditions is defined
  retries: 30
  delay: 10

- name: Refresh CM with Users
  kubernetes.core.k8s:
    api_key: "{{ K8S_AUTH_API_KEY  }}"
    host: "{{ K8S_AUTH_HOST }}"
    state: present
    apply: true
    definition: "{{ lookup('template', 'argo/gitops-cm.yml.j2') }}"
